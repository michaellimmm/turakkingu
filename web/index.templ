package web

import "strconv"

// ConversionPoint represents a single conversion tracking point
type ConversionPoint struct {
	ID     int    `json:"id"`
	Name   string `json:"name"`
	URL    string `json:"url"`
	Status string `json:"status"`
}

// LandingPage represents a redirect URL and landing page association
type LandingPage struct {
	ID              int    `json:"id"`
	FixedURL        string `json:"fixed_url"`
	LandingPageName string `json:"landing_page_name"`
	LandingPageURL  string `json:"landing_page_url"`
	Status          string `json:"status"`
}

// ConversionTracker handles the main state
type ConversionTracker struct {
	ConversionPoints []ConversionPoint
	LandingPages     []LandingPage
	ActiveTab        string
	ActiveSubTab     string
}

templ IndexPage(tracker *ConversionTracker) {
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>Conversion Tracker</title>
		<script src="https://unpkg.com/htmx.org@1.9.10"></script>
		<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>
		<style>
			.tab-active {
				border-bottom: 2px solid #2563eb;
				color: #2563eb;
			}
			.sub-tab-active {
				background-color: #f3f4f6;
				border: 1px solid #d1d5db;
				border-bottom: 1px solid #f3f4f6;
			}
			.modal {
				display: none;
			}
			.modal.show {
				display: flex;
			}
		</style>
	</head>
	<body class="bg-gray-50">
		<div class="max-w-7xl mx-auto p-6">
			@Header()
			@TabNavigation(tracker)
			@MainContent(tracker)
			@AddModal()
			@AddLandingPageModal()
		</div>
		@Scripts()
	</body>
	</html>
}

// Header component
templ Header() {
	<div class="mb-8">
		<h1 class="text-3xl font-bold text-gray-900">Conversion Tracker</h1>
	</div>
}

// Tab navigation
templ TabNavigation(tracker *ConversionTracker) {
	<div class="border-b border-gray-200 mb-6">
		<nav class="-mb-px flex space-x-8">
			<button 
				class={ "py-2 px-1 border-b-2 font-medium text-sm", 
					templ.KV("tab-active", tracker.ActiveTab == "tracking-settings"),
					templ.KV("border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300", tracker.ActiveTab != "tracking-settings") }
			>
				Tracking Settings
			</button>
			<button 
				class={ "py-2 px-1 border-b-2 font-medium text-sm",
					templ.KV("tab-active", tracker.ActiveTab == "tracking-snippet"),
					templ.KV("border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300", tracker.ActiveTab != "tracking-snippet") }
			>
				Tracking Snippet
			</button>
		</nav>
	</div>
}

// Main content area
templ MainContent(tracker *ConversionTracker) {
	<div class="bg-white rounded-lg shadow">
		<div id="main-content-body">
			@MainContentBody(tracker)
		</div>
	</div>
}

// Main content body (navigation + content)
templ MainContentBody(tracker *ConversionTracker) {
	@SubTabNavigation(tracker)
	<div id="tab-content">
		if tracker.ActiveSubTab == "conversion-point-url" {
			@ConversionContent(tracker)
		} else {
			@LandingPagesContent(tracker)
		}
	</div>
}

// Sub-tab navigation
templ SubTabNavigation(tracker *ConversionTracker) {
	<div class="border-b border-gray-200">
		<nav class="flex space-x-0">
			<button 
				class={ "py-3 px-4 text-sm font-medium border-r border-gray-200",
					templ.KV("sub-tab-active", tracker.ActiveSubTab == "conversion-point-url"),
					templ.KV("text-gray-500 hover:text-gray-700", tracker.ActiveSubTab != "conversion-point-url") }
				hx-get="/tab/conversion-point-url"
				hx-target="#main-content-body"
				hx-swap="innerHTML"
			>
				Conversion Point URL
			</button>
			<button 
				class={ "py-3 px-4 text-sm font-medium",
					templ.KV("sub-tab-active", tracker.ActiveSubTab == "redirect-url"),
					templ.KV("text-gray-500 hover:text-gray-700", tracker.ActiveSubTab != "redirect-url") }
				hx-get="/tab/redirect-url"
				hx-target="#main-content-body"
				hx-swap="innerHTML"
			>
				Redirect URL & Landing Pages
			</button>
		</nav>
	</div>
}

// Conversion Point URL content
templ ConversionContent(tracker *ConversionTracker) {
	<div class="p-6">
		<p class="text-sm text-gray-600 mb-6">
			Enter the URL of the pages you want to set as Conversion Points (for example Thank you page)
		</p>
		
		@ConversionSearchAndControls()
		
		<div id="conversion-table">
			@ConversionPointsTable(tracker.ConversionPoints)
		</div>
	</div>
}

// Landing Pages content
templ LandingPagesContent(tracker *ConversionTracker) {
	<div class="p-6">
		<p class="text-sm text-gray-600 mb-6">
			Generate a Redirect URL and associate a Landing page to it. The Redirect URL can be used inside scenarios.
		</p>
		
		@LandingPagesSearchAndControls()
		
		<div id="landing-pages-table">
			@LandingPagesTable(tracker.LandingPages)
		</div>
	</div>
}

// Conversion search and controls
templ ConversionSearchAndControls() {
	<div class="flex items-center justify-between mb-6">
		<div class="flex items-center space-x-4">
			<div class="relative">
				<input 
					type="text" 
					placeholder="Search by Name or URL"
					class="w-80 pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
					hx-post="/search"
					hx-target="#conversion-table"
					hx-swap="innerHTML"
					hx-trigger="keyup changed delay:300ms"
					name="search"
				/>
				<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
					<svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
					</svg>
				</div>
			</div>
			
			<select 
				class="border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
				hx-post="/filter"
				hx-target="#conversion-table"
				hx-swap="innerHTML"
				name="status"
			>
				<option value="">Status</option>
				<option value="all">All</option>
				<option value="Draft">Draft</option>
				<option value="Active">Active</option>
			</select>
			
			<button 
				class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
				onclick="showAddModal()"
			>
				<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
				</svg>
				Add
			</button>
			
			<button 
				class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
			>
				<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
				</svg>
				Edit
			</button>
		</div>
		
		<button 
			class="inline-flex items-center px-6 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
			hx-post="/start-tracking"
			hx-target="#conversion-table"
			hx-swap="innerHTML"
			hx-include="[name='selected']"
		>
			Start Tracking Selected
		</button>
	</div>
}

// Landing pages search and controls
templ LandingPagesSearchAndControls() {
	<div class="flex items-center justify-between mb-6">
		<div class="flex items-center space-x-4">
			<div class="relative">
				<input 
					type="text" 
					placeholder="Search by Name or URL"
					class="w-80 pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
					hx-post="/landing-pages/search"
					hx-target="#landing-pages-table"
					hx-swap="innerHTML"
					hx-trigger="keyup changed delay:300ms"
					name="search"
				/>
				<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
					<svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
					</svg>
				</div>
			</div>
			
			<select 
				class="border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
				hx-post="/landing-pages/filter"
				hx-target="#landing-pages-table"
				hx-swap="innerHTML"
				name="status"
			>
				<option value="">Status</option>
				<option value="all">All</option>
				<option value="Draft">Draft</option>
				<option value="Active">Active</option>
			</select>
			
			<button 
				class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
				onclick="showLandingPageModal()"
			>
				<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
				</svg>
				Add
			</button>
			
			<button 
				class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
			>
				<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
				</svg>
				Edit
			</button>
		</div>
		
		<button 
			class="inline-flex items-center px-6 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
			hx-post="/landing-pages/start-tracking"
			hx-target="#landing-pages-table"
			hx-swap="innerHTML"
			hx-include="[name='selected']"
		>
			Start Tracking All
		</button>
	</div>
}

// Conversion points table
templ ConversionPointsTable(points []ConversionPoint) {
	<div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
		<table class="min-w-full divide-y divide-gray-300">
			<thead class="bg-gray-50">
				<tr>
					<th scope="col" class="relative w-12 px-6 sm:w-16 sm:px-8">
						<input type="checkbox" class="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" onchange="toggleAllCheckboxes(this)"/>
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Name
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Conversion Point URL
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Status
					</th>
				</tr>
			</thead>
			<tbody class="bg-white divide-y divide-gray-200">
				for i, point := range points {
					@ConversionPointRow(point, i%2 == 0)
				}
			</tbody>
		</table>
	</div>
}

// Individual conversion point row
templ ConversionPointRow(point ConversionPoint, isEven bool) {
	<tr class={ templ.KV("bg-white", isEven), templ.KV("bg-gray-50", !isEven) }>
		<td class="relative w-12 px-6 sm:w-16 sm:px-8">
			<input 
				type="checkbox" 
				name="selected" 
				value={ strconv.Itoa(point.ID) }
				class="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
			/>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
			<div class="max-w-xs truncate">
				{ point.Name }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
			<div class="max-w-md truncate">
				{ point.URL }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<span class={ "inline-flex px-2 py-1 text-xs font-semibold rounded-full",
				templ.KV("bg-yellow-100 text-yellow-800", point.Status == "Draft"),
				templ.KV("bg-green-100 text-green-800", point.Status == "Active") }>
				{ point.Status }
			</span>
		</td>
	</tr>
}

// Landing pages table
templ LandingPagesTable(pages []LandingPage) {
	<div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
		<table class="min-w-full divide-y divide-gray-300">
			<thead class="bg-gray-50">
				<tr>
					<th scope="col" class="relative w-12 px-6 sm:w-16 sm:px-8">
						<input type="checkbox" class="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" onchange="toggleAllCheckboxes(this)"/>
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Fixed URL
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Landing Page Name
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Landing Page URL
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Status
					</th>
				</tr>
			</thead>
			<tbody class="bg-white divide-y divide-gray-200">
				for i, page := range pages {
					@LandingPageRow(page, i%2 == 0)
				}
			</tbody>
		</table>
	</div>
}

// Individual landing page row
templ LandingPageRow(page LandingPage, isEven bool) {
	<tr class={ templ.KV("bg-white", isEven), templ.KV("bg-gray-50", !isEven) }>
		<td class="relative w-12 px-6 sm:w-16 sm:px-8">
			<input 
				type="checkbox" 
				name="selected" 
				value={ strconv.Itoa(page.ID) }
				class="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
			/>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
			<div class="max-w-xs truncate">
				{ page.FixedURL }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
			<div class="max-w-xs truncate">
				{ page.LandingPageName }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
			<div class="max-w-md truncate">
				{ page.LandingPageURL }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<span class={ "inline-flex px-2 py-1 text-xs font-semibold rounded-full",
				templ.KV("bg-yellow-100 text-yellow-800", page.Status == "Draft"),
				templ.KV("bg-green-100 text-green-800", page.Status == "Active") }>
				{ page.Status }
			</span>
		</td>
	</tr>
}

// Add conversion point modal
templ AddModal() {
	<div id="addModal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full items-center justify-center">
		<div class="relative p-5 border w-96 shadow-lg rounded-md bg-white">
			<div class="mt-3">
				<h3 class="text-lg font-medium text-gray-900 mb-4">Add Conversion Point</h3>
				<form hx-post="/add" hx-target="#conversion-table" hx-swap="innerHTML" onsubmit="hideAddModal()">
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">Name</label>
						<input type="text" name="name" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required/>
					</div>
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">URL</label>
						<input type="url" name="url" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required/>
					</div>
					<div class="flex items-center justify-end space-x-3">
						<button type="button" onclick="hideAddModal()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
							Cancel
						</button>
						<button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700">
							Add
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
}

// Add landing page modal
templ AddLandingPageModal() {
	<div id="addLandingPageModal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full items-center justify-center">
		<div class="relative p-5 border w-96 shadow-lg rounded-md bg-white">
			<div class="mt-3">
				<h3 class="text-lg font-medium text-gray-900 mb-4">Add Landing Page</h3>
				<form hx-post="/landing-pages/add" hx-target="#landing-pages-table" hx-swap="innerHTML" onsubmit="hideLandingPageModal()">
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">Fixed URL</label>
						<input type="url" name="fixed_url" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required/>
					</div>
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">Landing Page Name</label>
						<input type="text" name="landing_page_name" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required/>
					</div>
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">Landing Page URL</label>
						<input type="url" name="landing_page_url" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required/>
					</div>
					<div class="flex items-center justify-end space-x-3">
						<button type="button" onclick="hideLandingPageModal()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
							Cancel
						</button>
						<button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700">
							Add
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
}

// JavaScript functions
templ Scripts() {
	<script>
		function showAddModal() {
			document.getElementById('addModal').classList.add('show');
		}

		function hideAddModal() {
			document.getElementById('addModal').classList.remove('show');
		}

		function showLandingPageModal() {
			document.getElementById('addLandingPageModal').classList.add('show');
		}

		function hideLandingPageModal() {
			document.getElementById('addLandingPageModal').classList.remove('show');
		}

		function toggleAllCheckboxes(source) {
			const checkboxes = document.querySelectorAll('input[name="selected"]');
			checkboxes.forEach(checkbox => {
				checkbox.checked = source.checked;
			});
		}

		// Close modals when clicking outside
		document.getElementById('addModal').addEventListener('click', function(e) {
			if (e.target === this) {
				hideAddModal();
			}
		});

		document.getElementById('addLandingPageModal').addEventListener('click', function(e) {
			if (e.target === this) {
				hideLandingPageModal();
			}
		});
	</script>
}