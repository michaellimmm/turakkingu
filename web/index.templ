package web

// ConversionPoint represents a single conversion tracking point
type ConversionPoint struct {
	ID     string `json:"id"`
	Name   string `json:"name"`
	URL    string `json:"url"`
	Status string `json:"status"`
}

// LandingPage represents a redirect URL and landing page association
type LandingPage struct {
	ID              string `json:"id"`
	FixedURL        string `json:"fixed_url"`
	LandingPageName string `json:"landing_page_name"`
	LandingPageURL  string `json:"landing_page_url"`
}

// ConversionTracker handles conversion points data
type ConversionTracker struct {
	ConversionPoints []ConversionPoint
}

// LandingPageTracker handles landing pages data
type LandingPageTracker struct {
	LandingPages []LandingPage
}

// Main index page
templ IndexPage(tracker *ConversionTracker) {
	@Layout() {
		@Header()
		@TabNavigation(tracker)
		@MainContent(tracker)
		@AddModal()
		@AddLandingPageModal()
		@EditLandingPageModal()
	}
}

// Header component
templ Header() {
	<div class="mb-8">
		<h1 class="text-3xl font-bold text-gray-900">Conversion Tracker</h1>
	</div>
}

// Tab navigation
templ TabNavigation(tracker *ConversionTracker) {
	<div class="border-b border-gray-200 mb-6">
		<nav class="-mb-px flex space-x-8">
			<button class="py-2 px-1 border-b-2 font-medium text-sm tab-active">
				Tracking Settings
			</button>
			<button class="py-2 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm">
				Tracking Snippet
			</button>
		</nav>
	</div>
}

// Main content area
templ MainContent(tracker *ConversionTracker) {
	<div class="bg-white rounded-lg shadow">
		@MainContentBody(tracker)
	</div>
}

// Main content body (navigation + content)
templ MainContentBody(tracker *ConversionTracker) {
	@SubTabNavigation()
	<div id="conversion-content" class="tab-content">
		@ConversionContent(tracker)
	</div>
	<div id="landing-pages-content" class="tab-content" style="display: none;">
		<div class="p-6">
			<div class="text-center text-gray-500">
				Loading landing pages...
			</div>
		</div>
	</div>
}

// Sub-tab navigation
templ SubTabNavigation() {
	<div class="border-b border-gray-200">
		<nav class="flex space-x-0">
			<button
				id="conversion-tab"
				class="py-3 px-4 text-sm font-medium border-r border-gray-200 sub-tab-active"
				onclick="switchTab('conversion')"
			>
				Conversion Point URL
			</button>
			<button
				id="landing-pages-tab"
				class="py-3 px-4 text-sm font-medium text-gray-500 hover:text-gray-700"
				onclick="switchTab('landing-pages')"
			>
				Redirect URL & Landing Pages
			</button>
		</nav>
	</div>
}

// Conversion Point URL content
templ ConversionContent(tracker *ConversionTracker) {
	<div class="p-6">
		<p class="text-sm text-gray-600 mb-6">
			Enter the URL of the pages you want to set as Conversion Points (for example Thank you page)
		</p>
		@ConversionSearchAndControls()
		<div id="conversion-table">
			@ConversionPointsTable(tracker.ConversionPoints)
		</div>
	</div>
}

// Landing Pages content
templ LandingPagesContent(pages []LandingPage) {
	<div class="p-6">
		<p class="text-sm text-gray-600 mb-6">
			Generate a Redirect URL and associate a Landing page to it. The Redirect URL can be used inside scenarios.
		</p>
		@LandingPagesSearchAndControls()
		<div id="landing-pages-table">
			@LandingPagesTable(pages)
		</div>
	</div>
}

// Conversion search and controls
templ ConversionSearchAndControls() {
	<div class="flex items-center justify-between mb-6">
		<div class="flex items-center space-x-4">
			<div class="relative">
				<input
					type="text"
					placeholder="Search by Name or URL"
					class="w-80 pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
					hx-post="/search"
					hx-target="#conversion-table"
					hx-swap="innerHTML"
					hx-trigger="keyup changed delay:300ms"
					name="search"
				/>
				<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
					<svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
					</svg>
				</div>
			</div>
			<select
                class="border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                hx-post="/filter"
                hx-target="#conversion-table"
                hx-swap="innerHTML"
                name="tenant_id"
            >
                <option value="all">ALL</option>
                <option value="tenant1">Tenant1</option>
                <option value="ulototeseyalixun">中部電力（カテエネ会員登録</option>
                <option value="irobotonlinestore">アイロボット オンラインストア</option>
                <option value="esufajicopajaqoz">タカミスキンピール</option>
            </select>
			<select
				class="border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
				hx-post="/filter"
				hx-target="#conversion-table"
				hx-swap="innerHTML"
				name="status"
			>
				<option value="">Status</option>
				<option value="all">All</option>
				<option value="Draft">Draft</option>
				<option value="Active">Active</option>
			</select>
			<button
				class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
				onclick="showAddModal()"
			>
				<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
				</svg>
				Add
			</button>
			<button
				class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
			>
				<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
				</svg>
				Edit
			</button>
		</div>
		<button
			class="inline-flex items-center px-6 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
			hx-post="/start-tracking"
			hx-target="#conversion-table"
			hx-swap="innerHTML"
			hx-include="[name='selected']"
		>
			Start Tracking Selected
		</button>
	</div>
}

// Landing pages search and controls
templ LandingPagesSearchAndControls() {
	<div class="flex items-center justify-between mb-6">
		<div class="flex items-center space-x-4">
			<div class="relative">
				<input
					type="text"
					placeholder="Search by Name or URL"
					class="w-80 pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
					hx-post="/landing-pages/search"
					hx-target="#landing-pages-table"
					hx-swap="innerHTML"
					hx-trigger="keyup changed delay:300ms"
					name="search"
				/>
				<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
					<svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
					</svg>
				</div>
			</div>
			<button
				class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
				onclick="showLandingPageModal()"
			>
				<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
				</svg>
				Add
			</button>
			<button
				class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
			>
				<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
				</svg>
				Edit
			</button>
		</div>
	</div>
}

// Conversion points table
templ ConversionPointsTable(points []ConversionPoint) {
	<div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
		<table class="min-w-full divide-y divide-gray-300">
			<thead class="bg-gray-50">
				<tr>
					<th scope="col" class="relative w-12 px-6 sm:w-16 sm:px-8">
						<input type="checkbox" class="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" onchange="toggleAllCheckboxes(this)"/>
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Name
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Conversion Point URL
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Status
					</th>
				</tr>
			</thead>
			<tbody class="bg-white divide-y divide-gray-200">
				for i, point := range points {
					@ConversionPointRow(point, i%2 == 0)
				}
			</tbody>
		</table>
	</div>
}

// Individual conversion point row
templ ConversionPointRow(point ConversionPoint, isEven bool) {
	<tr class={ templ.KV("bg-white", isEven), templ.KV("bg-gray-50", !isEven) }>
		<td class="relative w-12 px-6 sm:w-16 sm:px-8">
			<input
				type="checkbox"
				name="selected"
				value={ point.ID }
				class="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
			/>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
			<div class="max-w-xs truncate">
				{ point.Name }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
			<div class="max-w-md truncate">
				{ point.URL }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<span
				class={ "inline-flex px-2 py-1 text-xs font-semibold rounded-full",
				templ.KV("bg-yellow-100 text-yellow-800", point.Status == "Draft"),
				templ.KV("bg-green-100 text-green-800", point.Status == "Active") }
			>
				{ point.Status }
			</span>
		</td>
	</tr>
}

// Landing pages table
templ LandingPagesTable(pages []LandingPage) {
	<div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
		<table class="min-w-full divide-y divide-gray-300">
			<thead class="bg-gray-50">
				<tr>
					<th scope="col" class="relative w-12 px-6 sm:w-16 sm:px-8">
						<input type="checkbox" class="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" onchange="toggleAllCheckboxes(this)"/>
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Fixed URL
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Landing Page Name
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Landing Page URL
					</th>
				</tr>
			</thead>
			<tbody class="bg-white divide-y divide-gray-200">
				for i, page := range pages {
					@LandingPageRow(page, i%2 == 0)
				}
			</tbody>
		</table>
	</div>
}

// Individual landing page row
templ LandingPageRow(page LandingPage, isEven bool) {
	<tr class={ templ.KV("bg-white", isEven), templ.KV("bg-gray-50", !isEven) }>
		<td class="relative w-12 px-6 sm:w-16 sm:px-8">
			<input
				type="checkbox"
				name="selected"
				value={ page.ID }
				class="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
				onchange="checkForBulkEdit()"
			/>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
			<div class="max-w-xs truncate">
				{ page.FixedURL }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
			<div class="max-w-xs truncate">
				{ page.LandingPageName }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
			<div class="max-w-md truncate">
				{ page.LandingPageURL }
			</div>
		</td>
	</tr>
}

// Add conversion point modal
templ AddModal() {
	<div id="addModal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full items-center justify-center">
		<div class="relative p-5 border w-96 shadow-lg rounded-md bg-white">
			<div class="mt-3">
				<h3 class="text-lg font-medium text-gray-900 mb-4">Add Conversion Point</h3>
				<form hx-post="/add" hx-target="#conversion-table" hx-swap="innerHTML" onsubmit="hideAddModal()">
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">Name</label>
						<input type="text" name="name" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required/>
					</div>
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">URL</label>
						<input type="url" name="url" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required/>
					</div>
					<div class="flex items-center justify-end space-x-3">
						<button type="button" onclick="hideAddModal()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
							Cancel
						</button>
						<button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700">
							Add
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
}

// Add landing page modal
templ AddLandingPageModal() {
	<div id="addLandingPageModal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full items-center justify-center">
		<div class="relative p-5 border w-96 shadow-lg rounded-md bg-white">
			<div class="mt-3">
				<h3 class="text-lg font-medium text-gray-900 mb-4">Add Landing Page</h3>
				<form hx-post="/landing-pages/add" hx-target="#landing-pages-table" hx-swap="innerHTML" onsubmit="hideLandingPageModal()">
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">Landing Page Name</label>
						<input type="text" name="landing_page_name" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required/>
					</div>
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">Landing Page URL</label>
						<input type="url" name="landing_page_url" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required/>
					</div>
					<div class="flex items-center justify-end space-x-3">
						<button type="button" onclick="hideLandingPageModal()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
							Cancel
						</button>
						<button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700">
							Add
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
}

// Edit landing page modal
templ EditLandingPageModal() {
	<div id="editLandingPageModal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full items-center justify-center">
		<div class="relative p-5 border w-96 shadow-lg rounded-md bg-white">
			<div class="mt-3">
				<h3 class="text-lg font-medium text-gray-900 mb-4">Edit Landing Page</h3>
				<form id="editLandingPageForm" hx-target="#landing-pages-table" hx-swap="innerHTML" onsubmit="hideEditLandingPageModal()">
					<input type="hidden" id="editLandingPageId" name="id"/>
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">Landing Page Name</label>
						<input
							type="text"
							id="editLandingPageName"
							name="landing_page_name"
							class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
							placeholder="Enter landing page name"
							required
						/>
					</div>
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-700 mb-2">Landing Page URL</label>
						<input
							type="text"
							id="editLandingPageUrl"
							name="landing_page_url"
							class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
							placeholder="Enter landing page URL"
							required
						/>
					</div>
					<div class="flex items-center justify-end space-x-3">
						<button type="button" onclick="hideEditLandingPageModal()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
							Cancel
						</button>
						<button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700">
							Save Changes
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
}

// JavaScript functions
templ Scripts() {
	<script>
		function showAddModal() {
			document.getElementById('addModal').classList.add('show');
		}

		function hideAddModal() {
			document.getElementById('addModal').classList.remove('show');
		}

		function showLandingPageModal() {
			document.getElementById('addLandingPageModal').classList.add('show');
		}

		function hideLandingPageModal() {
			document.getElementById('addLandingPageModal').classList.remove('show');
		}

		function checkForBulkEdit() {
			// const selected = getSelectedLandingPages();
			// // Show bulk edit dialog if more than one item is selected
			// if (selected.length > 1) {
			// 	setTimeout(() => showBulkEditLandingPageModal(), 100);
			// }
		}

		function getSelectedLandingPages() {
			const checkboxes = document.querySelectorAll('input[name="selected"]:checked');
			return Array.from(checkboxes).map(cb => cb.value);
		}

		// Simple client-side tab switching with lazy loading
		function switchTab(tabName) {
			// Hide all tab contents
			const tabContents = document.querySelectorAll('.tab-content');
			tabContents.forEach(content => content.style.display = 'none');
			
			// Remove active class from all tabs
			const tabs = document.querySelectorAll('#conversion-tab, #landing-pages-tab');
			tabs.forEach(tab => {
				tab.classList.remove('sub-tab-active');
				tab.classList.add('text-gray-500', 'hover:text-gray-700');
			});
			
			// Show selected tab content
			const targetContent = document.getElementById(tabName + '-content');
			targetContent.style.display = 'block';
			
			// Activate selected tab
			const activeTab = document.getElementById(tabName + '-tab');
			activeTab.classList.add('sub-tab-active');
			activeTab.classList.remove('text-gray-500', 'hover:text-gray-700');
			
			// Lazy load landing pages data when first accessed
			if (tabName === 'landing-pages') {
				const landingPagesContent = targetContent.innerHTML;
				if (landingPagesContent.includes('Loading landing pages...')) {
					console.log('Loading landing pages data...');
					// Use HTMX to load the landing pages content
					htmx.ajax('GET', '/landing-pages', {
						target: '#landing-pages-content',
						swap: 'innerHTML'
					});
				}
			}
		}

		function showEditLandingPageModal(id, landingPageName, landingPageUrl) {
			console.log('Opening edit modal with data:', {id, landingPageName, landingPageUrl});
			
			document.getElementById('editLandingPageId').value = id;
			document.getElementById('editLandingPageName').value = landingPageName;
			document.getElementById('editLandingPageUrl').value = landingPageUrl;
						
			// Set the form action
			document.getElementById('editLandingPageForm').setAttribute('hx-post', '/landing-pages/edit/' + id);
			
			document.getElementById('editLandingPageModal').classList.add('show');
			
			// Focus on the first field to test editability
			setTimeout(() => {
				document.getElementById('editLandingPageName').focus();
				console.log('Fixed URL field focused');
			}, 100);
		}

		function hideEditLandingPageModal() {
			document.getElementById('editLandingPageModal').classList.remove('show');
		}

		// Event delegation for edit buttons
		document.addEventListener('click', function(e) {
			if (e.target.classList.contains('edit-landing-page-btn')) {
				console.log('Edit button clicked!'); // Debug log
				const id = e.target.getAttribute('data-id');
				const fixedUrl = e.target.getAttribute('data-fixed-url');
				const landingPageName = e.target.getAttribute('data-landing-page-name');
				const landingPageUrl = e.target.getAttribute('data-landing-page-url');
				const status = e.target.getAttribute('data-status');
				
				console.log('Data:', {id, landingPageName, landingPageUrl}); // Debug log
				
				showEditLandingPageModal(id, landingPageName, landingPageUrl);
			}
		});


		// Initialize HTMX for dynamically loaded content
		document.addEventListener('htmx:afterSwap', function(event) {
			// Re-process any new content for HTMX
			htmx.process(event.detail.target);
		});

		function toggleAllCheckboxes(source) {
			const checkboxes = document.querySelectorAll('input[name="selected"]');
			checkboxes.forEach(checkbox => {
				checkbox.checked = source.checked;
			});
			
			// Check for bulk edit after toggling all
			if (source.checked) {
				checkForBulkEdit();
			}
		}

		// Close modals when clicking outside
		document.getElementById('addModal').addEventListener('click', function(e) {
			if (e.target === this) {
				hideAddModal();
			}
		});

		document.getElementById('addLandingPageModal').addEventListener('click', function(e) {
			if (e.target === this) {
				hideLandingPageModal();
			}
		});

		document.getElementById('editLandingPageModal').addEventListener('click', function(e) {
			if (e.target === this) {
				hideEditLandingPageModal();
			}
		});

	</script>
}
