// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=repo_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	entity "github/michaellimmm/turakkingu/internal/entity"
	reflect "reflect"

	bson "go.mongodb.org/mongo-driver/v2/bson"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockRepo) CreateEvent(ctx context.Context, event *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockRepoMockRecorder) CreateEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockRepo)(nil).CreateEvent), ctx, event)
}

// CreateLink mocks base method.
func (m *MockRepo) CreateLink(arg0 context.Context, arg1 *entity.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockRepoMockRecorder) CreateLink(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockRepo)(nil).CreateLink), arg0, arg1)
}

// CreatePage mocks base method.
func (m *MockRepo) CreatePage(arg0 context.Context, arg1 *entity.ThankYouPage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockRepoMockRecorder) CreatePage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockRepo)(nil).CreatePage), arg0, arg1)
}

// CreateTrack mocks base method.
func (m *MockRepo) CreateTrack(ctx context.Context, track *entity.Track) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrack", ctx, track)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrack indicates an expected call of CreateTrack.
func (mr *MockRepoMockRecorder) CreateTrack(ctx, track any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrack", reflect.TypeOf((*MockRepo)(nil).CreateTrack), ctx, track)
}

// FindAllEventByTenantID mocks base method.
func (m *MockRepo) FindAllEventByTenantID(ctx context.Context, tenantID string) ([]*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEventByTenantID", ctx, tenantID)
	ret0, _ := ret[0].([]*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEventByTenantID indicates an expected call of FindAllEventByTenantID.
func (mr *MockRepoMockRecorder) FindAllEventByTenantID(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEventByTenantID", reflect.TypeOf((*MockRepo)(nil).FindAllEventByTenantID), ctx, tenantID)
}

// FindAllEventByTrackID mocks base method.
func (m *MockRepo) FindAllEventByTrackID(ctx context.Context, trackID bson.ObjectID) ([]*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEventByTrackID", ctx, trackID)
	ret0, _ := ret[0].([]*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEventByTrackID indicates an expected call of FindAllEventByTrackID.
func (mr *MockRepoMockRecorder) FindAllEventByTrackID(ctx, trackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEventByTrackID", reflect.TypeOf((*MockRepo)(nil).FindAllEventByTrackID), ctx, trackID)
}

// FindAllLinkbyTenantID mocks base method.
func (m *MockRepo) FindAllLinkbyTenantID(ctx context.Context, tenantID string) ([]*entity.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllLinkbyTenantID", ctx, tenantID)
	ret0, _ := ret[0].([]*entity.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllLinkbyTenantID indicates an expected call of FindAllLinkbyTenantID.
func (mr *MockRepoMockRecorder) FindAllLinkbyTenantID(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllLinkbyTenantID", reflect.TypeOf((*MockRepo)(nil).FindAllLinkbyTenantID), ctx, tenantID)
}

// FindLastEventByFingerprint mocks base method.
func (m *MockRepo) FindLastEventByFingerprint(ctx context.Context, fingerprint string) (*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastEventByFingerprint", ctx, fingerprint)
	ret0, _ := ret[0].(*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastEventByFingerprint indicates an expected call of FindLastEventByFingerprint.
func (mr *MockRepoMockRecorder) FindLastEventByFingerprint(ctx, fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastEventByFingerprint", reflect.TypeOf((*MockRepo)(nil).FindLastEventByFingerprint), ctx, fingerprint)
}

// FindLinkByID mocks base method.
func (m *MockRepo) FindLinkByID(arg0 context.Context, arg1 string) (*entity.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLinkByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLinkByID indicates an expected call of FindLinkByID.
func (mr *MockRepoMockRecorder) FindLinkByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLinkByID", reflect.TypeOf((*MockRepo)(nil).FindLinkByID), arg0, arg1)
}

// FindLinkByShortID mocks base method.
func (m *MockRepo) FindLinkByShortID(arg0 context.Context, arg1 string) (*entity.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLinkByShortID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLinkByShortID indicates an expected call of FindLinkByShortID.
func (mr *MockRepoMockRecorder) FindLinkByShortID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLinkByShortID", reflect.TypeOf((*MockRepo)(nil).FindLinkByShortID), arg0, arg1)
}

// FindOrCreateWithPagesByTenantID mocks base method.
func (m *MockRepo) FindOrCreateWithPagesByTenantID(ctx context.Context, tenantID string) (*entity.TrackingSettingWithPages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreateWithPagesByTenantID", ctx, tenantID)
	ret0, _ := ret[0].(*entity.TrackingSettingWithPages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreateWithPagesByTenantID indicates an expected call of FindOrCreateWithPagesByTenantID.
func (mr *MockRepoMockRecorder) FindOrCreateWithPagesByTenantID(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreateWithPagesByTenantID", reflect.TypeOf((*MockRepo)(nil).FindOrCreateWithPagesByTenantID), ctx, tenantID)
}

// FindTrackByID mocks base method.
func (m *MockRepo) FindTrackByID(ctx context.Context, id bson.ObjectID) (*entity.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrackByID", ctx, id)
	ret0, _ := ret[0].(*entity.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrackByID indicates an expected call of FindTrackByID.
func (mr *MockRepoMockRecorder) FindTrackByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrackByID", reflect.TypeOf((*MockRepo)(nil).FindTrackByID), ctx, id)
}

// FindTrackByIDWithThankYouPages mocks base method.
func (m *MockRepo) FindTrackByIDWithThankYouPages(ctx context.Context, id bson.ObjectID) (*entity.TrackWithThankYouPages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrackByIDWithThankYouPages", ctx, id)
	ret0, _ := ret[0].(*entity.TrackWithThankYouPages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrackByIDWithThankYouPages indicates an expected call of FindTrackByIDWithThankYouPages.
func (mr *MockRepoMockRecorder) FindTrackByIDWithThankYouPages(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrackByIDWithThankYouPages", reflect.TypeOf((*MockRepo)(nil).FindTrackByIDWithThankYouPages), ctx, id)
}

// FindTrackingSettingByID mocks base method.
func (m *MockRepo) FindTrackingSettingByID(ctx context.Context, id bson.ObjectID) (*entity.TrackingSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrackingSettingByID", ctx, id)
	ret0, _ := ret[0].(*entity.TrackingSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrackingSettingByID indicates an expected call of FindTrackingSettingByID.
func (mr *MockRepoMockRecorder) FindTrackingSettingByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrackingSettingByID", reflect.TypeOf((*MockRepo)(nil).FindTrackingSettingByID), ctx, id)
}

// FindTrackingSettingWithPagesByID mocks base method.
func (m *MockRepo) FindTrackingSettingWithPagesByID(ctx context.Context, trackingSettingID bson.ObjectID) (*entity.TrackingSettingWithPages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrackingSettingWithPagesByID", ctx, trackingSettingID)
	ret0, _ := ret[0].(*entity.TrackingSettingWithPages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrackingSettingWithPagesByID indicates an expected call of FindTrackingSettingWithPagesByID.
func (mr *MockRepoMockRecorder) FindTrackingSettingWithPagesByID(ctx, trackingSettingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrackingSettingWithPagesByID", reflect.TypeOf((*MockRepo)(nil).FindTrackingSettingWithPagesByID), ctx, trackingSettingID)
}

// IsTrackIDExist mocks base method.
func (m *MockRepo) IsTrackIDExist(ctx context.Context, id bson.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTrackIDExist", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTrackIDExist indicates an expected call of IsTrackIDExist.
func (mr *MockRepoMockRecorder) IsTrackIDExist(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTrackIDExist", reflect.TypeOf((*MockRepo)(nil).IsTrackIDExist), ctx, id)
}

// IsTrackingSettingIDExist mocks base method.
func (m *MockRepo) IsTrackingSettingIDExist(ctx context.Context, id bson.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTrackingSettingIDExist", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTrackingSettingIDExist indicates an expected call of IsTrackingSettingIDExist.
func (mr *MockRepoMockRecorder) IsTrackingSettingIDExist(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTrackingSettingIDExist", reflect.TypeOf((*MockRepo)(nil).IsTrackingSettingIDExist), ctx, id)
}

// UpdatePageFieldsAndReturn mocks base method.
func (m *MockRepo) UpdatePageFieldsAndReturn(arg0 context.Context, arg1 bson.ObjectID, arg2 *entity.ThankYouPage) (*entity.ThankYouPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePageFieldsAndReturn", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.ThankYouPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePageFieldsAndReturn indicates an expected call of UpdatePageFieldsAndReturn.
func (mr *MockRepoMockRecorder) UpdatePageFieldsAndReturn(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePageFieldsAndReturn", reflect.TypeOf((*MockRepo)(nil).UpdatePageFieldsAndReturn), arg0, arg1, arg2)
}

// MockRepoCloser is a mock of RepoCloser interface.
type MockRepoCloser struct {
	ctrl     *gomock.Controller
	recorder *MockRepoCloserMockRecorder
	isgomock struct{}
}

// MockRepoCloserMockRecorder is the mock recorder for MockRepoCloser.
type MockRepoCloserMockRecorder struct {
	mock *MockRepoCloser
}

// NewMockRepoCloser creates a new mock instance.
func NewMockRepoCloser(ctrl *gomock.Controller) *MockRepoCloser {
	mock := &MockRepoCloser{ctrl: ctrl}
	mock.recorder = &MockRepoCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoCloser) EXPECT() *MockRepoCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepoCloser) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepoCloserMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepoCloser)(nil).Close), arg0)
}

// CreateEvent mocks base method.
func (m *MockRepoCloser) CreateEvent(ctx context.Context, event *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockRepoCloserMockRecorder) CreateEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockRepoCloser)(nil).CreateEvent), ctx, event)
}

// CreateLink mocks base method.
func (m *MockRepoCloser) CreateLink(arg0 context.Context, arg1 *entity.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockRepoCloserMockRecorder) CreateLink(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockRepoCloser)(nil).CreateLink), arg0, arg1)
}

// CreatePage mocks base method.
func (m *MockRepoCloser) CreatePage(arg0 context.Context, arg1 *entity.ThankYouPage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockRepoCloserMockRecorder) CreatePage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockRepoCloser)(nil).CreatePage), arg0, arg1)
}

// CreateTrack mocks base method.
func (m *MockRepoCloser) CreateTrack(ctx context.Context, track *entity.Track) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrack", ctx, track)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrack indicates an expected call of CreateTrack.
func (mr *MockRepoCloserMockRecorder) CreateTrack(ctx, track any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrack", reflect.TypeOf((*MockRepoCloser)(nil).CreateTrack), ctx, track)
}

// FindAllEventByTenantID mocks base method.
func (m *MockRepoCloser) FindAllEventByTenantID(ctx context.Context, tenantID string) ([]*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEventByTenantID", ctx, tenantID)
	ret0, _ := ret[0].([]*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEventByTenantID indicates an expected call of FindAllEventByTenantID.
func (mr *MockRepoCloserMockRecorder) FindAllEventByTenantID(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEventByTenantID", reflect.TypeOf((*MockRepoCloser)(nil).FindAllEventByTenantID), ctx, tenantID)
}

// FindAllEventByTrackID mocks base method.
func (m *MockRepoCloser) FindAllEventByTrackID(ctx context.Context, trackID bson.ObjectID) ([]*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEventByTrackID", ctx, trackID)
	ret0, _ := ret[0].([]*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEventByTrackID indicates an expected call of FindAllEventByTrackID.
func (mr *MockRepoCloserMockRecorder) FindAllEventByTrackID(ctx, trackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEventByTrackID", reflect.TypeOf((*MockRepoCloser)(nil).FindAllEventByTrackID), ctx, trackID)
}

// FindAllLinkbyTenantID mocks base method.
func (m *MockRepoCloser) FindAllLinkbyTenantID(ctx context.Context, tenantID string) ([]*entity.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllLinkbyTenantID", ctx, tenantID)
	ret0, _ := ret[0].([]*entity.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllLinkbyTenantID indicates an expected call of FindAllLinkbyTenantID.
func (mr *MockRepoCloserMockRecorder) FindAllLinkbyTenantID(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllLinkbyTenantID", reflect.TypeOf((*MockRepoCloser)(nil).FindAllLinkbyTenantID), ctx, tenantID)
}

// FindLastEventByFingerprint mocks base method.
func (m *MockRepoCloser) FindLastEventByFingerprint(ctx context.Context, fingerprint string) (*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastEventByFingerprint", ctx, fingerprint)
	ret0, _ := ret[0].(*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastEventByFingerprint indicates an expected call of FindLastEventByFingerprint.
func (mr *MockRepoCloserMockRecorder) FindLastEventByFingerprint(ctx, fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastEventByFingerprint", reflect.TypeOf((*MockRepoCloser)(nil).FindLastEventByFingerprint), ctx, fingerprint)
}

// FindLinkByID mocks base method.
func (m *MockRepoCloser) FindLinkByID(arg0 context.Context, arg1 string) (*entity.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLinkByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLinkByID indicates an expected call of FindLinkByID.
func (mr *MockRepoCloserMockRecorder) FindLinkByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLinkByID", reflect.TypeOf((*MockRepoCloser)(nil).FindLinkByID), arg0, arg1)
}

// FindLinkByShortID mocks base method.
func (m *MockRepoCloser) FindLinkByShortID(arg0 context.Context, arg1 string) (*entity.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLinkByShortID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLinkByShortID indicates an expected call of FindLinkByShortID.
func (mr *MockRepoCloserMockRecorder) FindLinkByShortID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLinkByShortID", reflect.TypeOf((*MockRepoCloser)(nil).FindLinkByShortID), arg0, arg1)
}

// FindOrCreateWithPagesByTenantID mocks base method.
func (m *MockRepoCloser) FindOrCreateWithPagesByTenantID(ctx context.Context, tenantID string) (*entity.TrackingSettingWithPages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreateWithPagesByTenantID", ctx, tenantID)
	ret0, _ := ret[0].(*entity.TrackingSettingWithPages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreateWithPagesByTenantID indicates an expected call of FindOrCreateWithPagesByTenantID.
func (mr *MockRepoCloserMockRecorder) FindOrCreateWithPagesByTenantID(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreateWithPagesByTenantID", reflect.TypeOf((*MockRepoCloser)(nil).FindOrCreateWithPagesByTenantID), ctx, tenantID)
}

// FindTrackByID mocks base method.
func (m *MockRepoCloser) FindTrackByID(ctx context.Context, id bson.ObjectID) (*entity.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrackByID", ctx, id)
	ret0, _ := ret[0].(*entity.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrackByID indicates an expected call of FindTrackByID.
func (mr *MockRepoCloserMockRecorder) FindTrackByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrackByID", reflect.TypeOf((*MockRepoCloser)(nil).FindTrackByID), ctx, id)
}

// FindTrackByIDWithThankYouPages mocks base method.
func (m *MockRepoCloser) FindTrackByIDWithThankYouPages(ctx context.Context, id bson.ObjectID) (*entity.TrackWithThankYouPages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrackByIDWithThankYouPages", ctx, id)
	ret0, _ := ret[0].(*entity.TrackWithThankYouPages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrackByIDWithThankYouPages indicates an expected call of FindTrackByIDWithThankYouPages.
func (mr *MockRepoCloserMockRecorder) FindTrackByIDWithThankYouPages(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrackByIDWithThankYouPages", reflect.TypeOf((*MockRepoCloser)(nil).FindTrackByIDWithThankYouPages), ctx, id)
}

// FindTrackingSettingByID mocks base method.
func (m *MockRepoCloser) FindTrackingSettingByID(ctx context.Context, id bson.ObjectID) (*entity.TrackingSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrackingSettingByID", ctx, id)
	ret0, _ := ret[0].(*entity.TrackingSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrackingSettingByID indicates an expected call of FindTrackingSettingByID.
func (mr *MockRepoCloserMockRecorder) FindTrackingSettingByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrackingSettingByID", reflect.TypeOf((*MockRepoCloser)(nil).FindTrackingSettingByID), ctx, id)
}

// FindTrackingSettingWithPagesByID mocks base method.
func (m *MockRepoCloser) FindTrackingSettingWithPagesByID(ctx context.Context, trackingSettingID bson.ObjectID) (*entity.TrackingSettingWithPages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrackingSettingWithPagesByID", ctx, trackingSettingID)
	ret0, _ := ret[0].(*entity.TrackingSettingWithPages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrackingSettingWithPagesByID indicates an expected call of FindTrackingSettingWithPagesByID.
func (mr *MockRepoCloserMockRecorder) FindTrackingSettingWithPagesByID(ctx, trackingSettingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrackingSettingWithPagesByID", reflect.TypeOf((*MockRepoCloser)(nil).FindTrackingSettingWithPagesByID), ctx, trackingSettingID)
}

// IsTrackIDExist mocks base method.
func (m *MockRepoCloser) IsTrackIDExist(ctx context.Context, id bson.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTrackIDExist", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTrackIDExist indicates an expected call of IsTrackIDExist.
func (mr *MockRepoCloserMockRecorder) IsTrackIDExist(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTrackIDExist", reflect.TypeOf((*MockRepoCloser)(nil).IsTrackIDExist), ctx, id)
}

// IsTrackingSettingIDExist mocks base method.
func (m *MockRepoCloser) IsTrackingSettingIDExist(ctx context.Context, id bson.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTrackingSettingIDExist", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTrackingSettingIDExist indicates an expected call of IsTrackingSettingIDExist.
func (mr *MockRepoCloserMockRecorder) IsTrackingSettingIDExist(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTrackingSettingIDExist", reflect.TypeOf((*MockRepoCloser)(nil).IsTrackingSettingIDExist), ctx, id)
}

// UpdatePageFieldsAndReturn mocks base method.
func (m *MockRepoCloser) UpdatePageFieldsAndReturn(arg0 context.Context, arg1 bson.ObjectID, arg2 *entity.ThankYouPage) (*entity.ThankYouPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePageFieldsAndReturn", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.ThankYouPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePageFieldsAndReturn indicates an expected call of UpdatePageFieldsAndReturn.
func (mr *MockRepoCloserMockRecorder) UpdatePageFieldsAndReturn(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePageFieldsAndReturn", reflect.TypeOf((*MockRepoCloser)(nil).UpdatePageFieldsAndReturn), arg0, arg1, arg2)
}
